@page "/login"
@using Blazored.LocalStorage
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<h3>Login</h3>

<EditForm Model="loginRequest" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <input @bind="loginRequest.UserName" Label="Benutzername" Required />
    <input @bind="loginRequest.Password" Label="Passwort" InputType="password" Required />

    <button Type="Submit" Variant="Filled" Color="Primary">Anmelden</button>
</EditForm>

@if (!string.IsNullOrEmpty(fehlermeldung))
{
    <MudAlert Severity="Severity.Error">@fehlermeldung</MudAlert>
}

@code {
    private LoginRequest loginRequest = new();
    private string? fehlermeldung;

    private async Task HandleLogin()
    {
        fehlermeldung = null;

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7158/api/account/login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var auth = await response.Content.ReadFromJsonAsync<AuthResponse>();
                await LocalStorage.SetItemAsync("authToken", auth!.Token);
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", auth.Token);
                Navigation.NavigateTo("/", true);
            }
            else
            {
                fehlermeldung = "Login fehlgeschlagen. Bitte überprüfen Sie Ihre Eingaben.";
            }
        }
        catch (Exception ex)
        {
            fehlermeldung = $"Fehler: {ex.Message}";
        }
    }

    public class LoginRequest
    {
        public string UserName { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class AuthResponse
    {
        public string Token { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
    }
}
